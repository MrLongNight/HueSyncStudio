name: Build and Release

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from CMake
        id: get_version
        shell: pwsh
        run: |
          $version = Select-String -Path CMakeLists.txt -Pattern 'project\(HueSyncStudio VERSION (.+?) LANGUAGES' | ForEach-Object { $_.Matches.Groups[1].Value }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "Detected version: $version"

      - name: Setup vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.bat
        shell: cmd

      - name: Cache vcpkg artifacts
        uses: actions/cache@v4
        with:
          path: |
            vcpkg/installed
            vcpkg/downloads
          key: ${{ runner.os }}-vcpkg-classic-${{ hashFiles('.github/workflows/build_and_release.yml') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-classic-

      # Classic-Modus mit --classic Flag erzwingen
      - name: Install dependencies
        run: |
          .\vcpkg\vcpkg.exe install --classic qtbase qtwebsockets qt6-declarative qt6-quickcontrols2 spdlog nlohmann-json catch2 rtaudio --triplet=x64-windows
        shell: cmd

      - name: Configure CMake
        run: |
          cmake -B build -S . ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake ^
            -DBUILD_TESTING=ON ^
            -DVCPKG_TARGET_TRIPLET=x64-windows
        shell: cmd

      - name: Build project
        run: |
          cmake --build build --config Release --parallel
        shell: cmd

      - name: Run tests
        run: |
          ctest --test-dir build --output-on-failure -C Release
        shell: cmd

      - name: Package artifacts
        run: |
          cmake --build build --config Release --target package || echo "Package step encountered issues but continuing..."
        shell: pwsh

      - name: List all build artifacts
        run: |
          Write-Host "===== Build directory content ====="
          Get-ChildItem -Path "build" -Recurse -Depth 2 | Select-Object FullName, Length | Format-Table -AutoSize
          
          Write-Host "===== CPack outputs ====="
          Get-ChildItem -Path "build" -Filter "*.exe" -Recurse | Select-Object FullName, Length
          Get-ChildItem -Path "build" -Filter "*.zip" -Recurse | Select-Object FullName, Length
        shell: pwsh

      - name: Create ZIP archive
        run: |
          # Suche nach der Hauptausf√ºhrungsdatei
          $exeFiles = Get-ChildItem -Path "build" -Filter "*.exe" -Recurse | 
                      Where-Object { -not $_.FullName.Contains("_deps") -and -not $_.FullName.Contains("vcpkg") }
          
          if (-not $exeFiles) {
            Write-Host "ERROR: Could not find any executables in the build directory"
            exit 0  # Continue workflow to upload any available artifacts
          }
          
          # Bevorzuge HueSyncStudio.exe, falls vorhanden
          $mainExe = $exeFiles | Where-Object { $_.Name -eq "HueSyncStudio.exe" } | Select-Object -First 1
          if (-not $mainExe) {
            $mainExe = $exeFiles | Select-Object -First 1
          }
          
          $exeDir = Split-Path -Parent $mainExe.FullName
          Write-Host "Found main executable: $($mainExe.FullName)"
          
          $version = "${{ steps.get_version.outputs.VERSION }}"
          $zipName = "HueSyncStudio-$version-Win64.zip"
          
          # Sammle alle DLLs im selben Verzeichnis wie die EXE
          $filesToZip = @($mainExe.FullName)
          $dllFiles = Get-ChildItem -Path $exeDir -Filter "*.dll" -ErrorAction SilentlyContinue
          if ($dllFiles) {
            $filesToZip += $dllFiles.FullName
          }
          
          Compress-Archive -Path $filesToZip -DestinationPath "build/$zipName" -Force
          Write-Host "Created ZIP archive: build/$zipName with $($filesToZip.Count) files"
        shell: pwsh

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        with:
          files: |
            build/*.exe
            build/*.zip
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', steps.get_version.outputs.VERSION) }}
          name: HueSyncStudio ${{ steps.get_version.outputs.VERSION }}
          generate_release_notes: true
