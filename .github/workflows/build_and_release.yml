name: Build and Release

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: s
          fetch-depth: 0
          submodules: 'recursive'

      # Optional: Enable Windows long paths support via registry
      - name: Enable Windows long paths
        shell: pwsh
        run: |
          try {
            Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem' -Name 'LongPathsEnabled' -Value 1 -ErrorAction SilentlyContinue
            Write-Host "Windows long paths enabled (if registry access available)"
          } catch {
            Write-Host "Could not enable long paths via registry (requires admin), continuing anyway..."
          }

      - name: Extract version from CMake
        id: get_version
        shell: pwsh
        working-directory: s
        run: |
          $version = Select-String -Path CMakeLists.txt -Pattern 'project\(HueSyncStudio VERSION (.+?) LANGUAGES' | ForEach-Object { $_.Matches.Groups[1].Value }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "Detected version: $version"

      - name: Update and bootstrap vcpkg
        shell: powershell
        working-directory: s
        run: |
          Write-Host "Cloning and updating vcpkg to latest origin/master"
          git clone --depth=1 https://github.com/microsoft/vcpkg.git vcpkg
          cd vcpkg
          git fetch --all --tags
          git checkout origin/master
          git reset --hard origin/master
          Write-Host "Initializing vcpkg submodules (including ports)..."
          git submodule update --init --recursive
          Write-Host "Bootstrapping vcpkg..."
          .\bootstrap-vcpkg.bat -disableMetrics

      - name: Verify vcpkg ports are available
        shell: powershell
        working-directory: s
        run: |
          Write-Host "Verifying vcpkg ports directory..."
          if (Test-Path "vcpkg\ports") {
            Write-Host "✓ vcpkg\ports directory exists"
            $portCount = (Get-ChildItem "vcpkg\ports" -Directory).Count
            Write-Host "  Found $portCount port directories"

            # Check for specific Qt6 ports we need
            $qt6Declarative = Test-Path "vcpkg\ports\qt6-declarative"
            $qt6QuickControls = Test-Path "vcpkg\ports\qt6-quickcontrols2"

            if ($qt6Declarative) {
              Write-Host "✓ qt6-declarative port found"
            } else {
              Write-Host "✗ WARNING: qt6-declarative port NOT found"
            }

            if ($qt6QuickControls) {
              Write-Host "✓ qt6-quickcontrols2 port found"
            } else {
              Write-Host "✗ WARNING: qt6-quickcontrols2 port NOT found"
            }
          } else {
            Write-Host "✗ ERROR: vcpkg\ports directory does not exist!"
            exit 1
          }

      - name: Clear old vcpkg artifacts
        shell: cmd
        working-directory: s
        run: |
          if exist vcpkg\buildtrees rd /s /q vcpkg\buildtrees
          if exist vcpkg\packages rd /s /q vcpkg\packages
          echo Cleared old vcpkg build artifacts

      - name: Cache vcpkg artifacts
        uses: actions/cache@v4
        with:
          path: |
            s/vcpkg/installed
            s/vcpkg/packages
            s/vcpkg/buildtrees
            s/vcpkg/downloads
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('s/vcpkg/.git/HEAD', 's/vcpkg.json', '.github/workflows/build_and_release.yml') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      # Show vcpkg manifest to make debugging clearer in logs
      - name: Show vcpkg manifest
        shell: cmd
        working-directory: s
        run: |
          if exist vcpkg.json (
            type vcpkg.json
          ) else (
            echo "No vcpkg.json found in repository root (s)."
          )

      # Explicitly install Qt6 packages first to ensure they're available
      - name: Install Qt6 packages explicitly
        shell: powershell
        working-directory: s
        env:
          VCPKG_ROOT: ${{ github.workspace }}\s\vcpkg
        run: |
          Write-Host "Installing qt6-declarative and qt6-quickcontrols2 explicitly..."
          .\vcpkg\vcpkg.exe install qt6-declarative qt6-quickcontrols2 --triplet x64-windows
          Write-Host "Qt6 packages installation complete"

      # Install dependencies using manifest mode (do not pass package names)
      - name: Install dependencies
        shell: cmd
        working-directory: s
        env:
          VCPKG_ROOT: ${{ github.workspace }}\s\vcpkg
          VCPKG_DOWNLOADS: ${{ github.workspace }}\s\vcpkg\downloads
        run: |
          .\vcpkg\vcpkg.exe install --triplet x64-windows

      - name: Verify Qt6 ports installation
        shell: powershell
        working-directory: s
        run: |
          Write-Host "Verifying qt6-declarative and qt6-quickcontrols2 are available..."
          $vcpkg = ".\vcpkg\vcpkg.exe"
          if (Test-Path $vcpkg) {
            Write-Host "Checking qt6-declarative..."
            & $vcpkg list qt6-declarative
            Write-Host "Checking qt6-quickcontrols2..."
            & $vcpkg list qt6-quickcontrols2
            Write-Host "Qt6 ports verification complete"
          } else {
            Write-Host "vcpkg not found, skipping verification"
          }

      - name: Configure CMake
        shell: cmd
        working-directory: s
        run: |
          cmake -B build -S . ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DCMAKE_TOOLCHAIN_FILE=vcpkg\scripts\buildsystems\vcpkg.cmake ^
            -DBUILD_TESTING=ON ^
            -DVCPKG_TARGET_TRIPLET=x64-windows

      - name: Build project
        shell: cmd
        working-directory: s
        run: |
          cmake --build build --config Release --parallel

      - name: Run tests
        shell: cmd
        working-directory: s
        run: |
          ctest --test-dir build --output-on-failure -C Release

      - name: Package artifacts
        shell: pwsh
        working-directory: s
        run: |
          cmake --build build --config Release --target package || echo "Package step encountered issues but continuing..."

      - name: List all build artifacts
        shell: pwsh
        working-directory: s
        run: |
          Write-Host "===== Build directory content ====="
          Get-ChildItem -Path "build" -Recurse -Depth 2 | Select-Object FullName, Length | Format-Table -AutoSize

          Write-Host "===== CPack outputs ====="
          Get-ChildItem -Path "build" -Filter "*.exe" -Recurse | Select-Object FullName, Length
          Get-ChildItem -Path "build" -Filter "*.zip" -Recurse | Select-Object FullName, Length

      - name: Create ZIP archive
        shell: pwsh
        working-directory: s
        run: |
          # Suche nach der Hauptausführungsdatei
          $exeFiles = Get-ChildItem -Path "build" -Filter "*.exe" -Recurse |
                      Where-Object { -not $_.FullName.Contains("_deps") -and -not $_.FullName.Contains("vcpkg") }

          if (-not $exeFiles) {
            Write-Host "ERROR: Could not find any executables in the build directory"
            exit 0  # Continue workflow to upload any available artifacts
          }

          # Bevorzuge HueSyncStudio.exe, falls vorhanden
          $mainExe = $exeFiles | Where-Object { $_.Name -eq "HueSyncStudio.exe" } | Select-Object -First 1
          if (-not $mainExe) {
            $mainExe = $exeFiles | Select-Object -First 1
          }

          $exeDir = Split-Path -Parent $mainExe.FullName
          Write-Host "Found main executable: $($mainExe.FullName)"

          $version = "${{ steps.get_version.outputs.VERSION }}"
          $zipName = "HueSyncStudio-$version-Win64.zip"

          # Sammle alle DLLs im selben Verzeichnis wie die EXE
          $filesToZip = @($mainExe.FullName)
          $dllFiles = Get-ChildItem -Path $exeDir -Filter "*.dll" -ErrorAction SilentlyContinue
          if ($dllFiles) {
            $filesToZip += $dllFiles.FullName
          }

          Compress-Archive -Path $filesToZip -DestinationPath "build/$zipName" -Force
          Write-Host "Created ZIP archive: build/$zipName with $($filesToZip.Count) files"

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        with:
          files: |
            s/build/*.exe
            s/build/*.zip
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', steps.get_version.outputs.VERSION) }}
          name: HueSyncStudio ${{ steps.get_version.outputs.VERSION }}
          generate_release_notes: true
