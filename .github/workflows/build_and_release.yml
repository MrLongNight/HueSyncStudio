name: Build and Release

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # vollständige Historie für Releases/Tags

      - name: Extract version from CMake
        id: get_version
        shell: pwsh
        run: |
          $version = Select-String -Path CMakeLists.txt -Pattern 'project\(HueSyncStudio VERSION (.+?) LANGUAGES' | ForEach-Object { $_.Matches.Groups[1].Value }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "Detected version: $version"

      - name: Setup vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git vcpkg --depth 1
          .\vcpkg\bootstrap-vcpkg.bat
        shell: cmd

      - name: Cache vcpkg artifacts
        uses: actions/cache@v4
        with:
          path: |
            vcpkg/installed
            vcpkg/downloads
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Install dependencies using manifest mode
        run: |
          .\vcpkg\vcpkg.exe install --triplet=x64-windows
        shell: cmd

      - name: Configure CMake
        run: |
          cmake -B build -S . ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake ^
            -DBUILD_TESTING=ON ^
            -DVCPKG_TARGET_TRIPLET=x64-windows
        shell: cmd

      - name: Build project
        run: |
          cmake --build build --config Release --parallel
        shell: cmd

      - name: Run tests
        run: |
          ctest --test-dir build --output-on-failure -C Release
        shell: cmd

      - name: Package artifacts
        run: |
          cmake --build build --config Release --target package
        shell: cmd

      - name: Check installer creation
        run: |
          $installers = Get-ChildItem -Path build -Filter "*.exe" -Recurse
          if ($installers.Count -eq 0) {
            echo "Error: No installer found in build directory"
            exit 1
          }
          echo "Found installers: $($installers.FullName)"
        shell: pwsh

      - name: Create ZIP archive
        run: |
          $buildDir = "build/Release"
          $version = "${{ steps.get_version.outputs.VERSION }}"
          $zipName = "HueSyncStudio-$version-Win64.zip"
          Compress-Archive -Path "$buildDir/HueSyncStudio.exe", "$buildDir/*.dll" -DestinationPath "build/$zipName"
        shell: pwsh

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        with:
          files: |
            build/*.exe
            build/*.zip
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', steps.get_version.outputs.VERSION) }}
          name: HueSyncStudio ${{ steps.get_version.outputs.VERSION }}
          generate_release_notes: true
